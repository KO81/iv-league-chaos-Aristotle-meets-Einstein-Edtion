import{c as StB}from'./binary.switcher.js';
/*inspired by "Seek the depths, but never the end."
offset array js by Christian Feilert*/
function rot(num=1,bool=true){let a0=[...this],d0=0;for(d0;d0<num;d0++){bool?a0.unshift(a0.pop()):a0.push(a0.shift())}return a0
};Object.defineProperty(Array.prototype,'rotate',{value:rot,writable:false});
const a={
	a:[45,51,101,78,2,18,109,17,25,56,95,111,34,4,24,57,14,15,21,32,16,96,94,97,120,117,42,110,54,53,112,98,0,121,85,3,55,127,61,84,108,75,70,35,22,41,113,90,114,33,65,103,72,50,118,48,87,82,46,64,105,59,91,119,9,81,68,5,77,23,92,11,83,12,7,99,1,79,20,102,104,40,30,47,116,124,123,27,115,125,8,100,66,43,107,28,60,31,73,88,74,29,6,69,71,44,13,39,58,89,49,19,126,37,10,122,36,63,86,67,26,93,62,52,76,38,80,106],
	b:[97,44,95,78,76,96,8,71,90,36,39,57,33,98,17,91,20,37,73,113,72,114,2,94,59,18,68,29,112,49,52,108,87,10,27,32,118,21,47,80,40,4,75,48,46,63,120,26,111,43,16,126,24,25,0,88,5,12,123,56,60,23,55,83,28,58,119,106,92,50,109,85,62,14,82,117,84,61,79,6,15,19,67,105,74,100,9,101,3,54,122,69,53,70,102,89,64,127,115,11,30,42,7,34,65,1,31,51,107,124,125,104,110,38,77,45,13,86,99,66,103,41,116,121,93,35,22,81],
	c:[127,123,48,0,56,92,91,72,60,39,116,80,46,16,31,87,82,13,57,99,126,98,7,120,102,64,12,118,30,78,114,3,9,79,117,70,50,15,74,71,85,52,29,19,59,17,27,103,53,18,26,121,34,96,2,86,5,75,38,100,68,113,81,20,4,45,49,66,115,24,33,62,107,37,47,106,108,69,61,28,119,35,124,43,95,1,6,89,41,112,104,76,93,110,11,54,23,101,111,63,55,97,125,109,65,94,10,88,51,73,40,36,58,83,14,32,8,84,105,122,25,21,77,90,67,42,44,22],
	d:[97,75,108,17,74,121,29,39,52,113,114,95,102,2,76,122,71,19,69,22,11,66,59,106,32,78,100,126,62,112,55,27,35,123,42,20,85,26,34,30,14,65,13,72,81,49,25,89,18,118,90,38,88,58,1,111,16,23,61,82,109,36,60,7,24,37,43,8,67,44,47,94,124,127,117,83,54,6,53,86,99,56,50,63,115,21,87,51,33,48,120,105,0,92,5,84,28,12,125,104,119,57,10,46,9,15,64,79,101,77,45,3,91,4,96,70,93,98,73,103,107,68,116,110,40,41,80,31],
	e:[112,23,55,70,120,87,117,97,42,9,37,27,15,18,109,59,124,111,91,68,10,48,50,65,30,71,25,7,64,123,110,28,80,83,118,81,78,46,66,69,90,38,96,94,60,14,61,57,31,5,77,0,52,84,119,1,43,116,63,126,82,4,106,95,98,40,20,2,34,92,19,115,99,79,44,127,75,17,26,33,29,47,76,11,13,8,67,32,36,104,105,93,72,114,54,107,51,12,122,49,113,125,39,24,121,101,6,53,86,108,35,88,74,56,45,103,100,21,22,89,62,85,58,73,41,16,3,102],
	f:[48,78,31,72,113,1,32,99,28,59,18,95,123,77,127,83,2,37,108,56,25,34,92,58,111,109,79,89,5,102,6,7,67,62,84,40,116,42,71,19,44,94,74,73,97,61,105,20,57,43,68,17,24,118,60,9,26,65,70,82,16,80,15,53,104,63,50,10,23,106,47,8,38,21,52,3,126,64,75,12,14,91,39,122,46,121,54,86,11,4,13,114,27,88,100,33,125,101,119,103,107,30,29,0,87,55,22,35,96,110,49,36,90,45,124,41,98,51,117,115,112,69,120,66,93,85,76,81],
	g:[82,2,120,77,86,30,66,42,74,65,63,75,21,48,64,105,68,54,119,70,1,127,34,92,118,117,38,67,125,104,16,40,95,126,84,71,44,62,41,57,85,110,15,91,115,89,60,108,61,73,4,32,18,13,76,97,12,24,7,101,31,3,8,109,33,100,9,88,87,27,52,46,99,45,112,6,29,51,122,22,25,20,69,102,14,5,49,106,11,58,94,79,78,35,23,121,53,39,80,98,93,47,10,55,83,72,28,19,0,81,96,26,103,56,116,37,17,50,113,114,124,43,90,36,111,107,59,123],
	h:[57,60,22,37,96,116,7,9,120,21,20,86,76,110,8,122,3,56,118,42,104,31,88,90,84,11,29,127,65,54,61,92,93,5,62,41,1,78,68,24,52,49,51,77,81,106,46,48,44,80,87,112,121,115,101,12,16,55,74,66,94,14,10,35,67,53,79,85,107,18,25,123,69,105,32,47,98,4,71,39,6,38,40,99,13,2,119,70,108,89,19,126,15,17,91,33,103,45,124,113,58,64,83,109,75,23,27,117,97,100,82,125,102,63,111,59,0,36,26,43,50,73,34,30,95,114,72,28],
	i:[96,75,42,68,106,85,56,70,81,107,101,57,24,49,127,35,32,66,117,95,44,22,93,84,23,88,77,5,90,14,17,92,33,38,98,83,31,55,36,122,64,103,124,4,102,10,65,100,47,123,80,3,46,30,28,86,76,82,89,71,40,111,19,118,8,59,112,125,58,11,109,74,110,73,87,63,120,69,1,105,61,21,2,99,121,104,45,20,29,39,54,108,18,97,7,15,114,94,79,119,6,52,60,116,53,34,48,43,51,37,115,9,16,13,12,72,27,126,62,0,50,91,26,113,78,67,41,25]
},d={
	a:['SHA-256','SHA-384','SHA-512'],
	b:['0000','0001','0010','0100','1001','0011','0110','1100','0101','1010','1110','1011','1101','0111','1111','1000'],
	c:['10101101','10000001','10001101','10001111','10010000','10011101'],
	d:['a','b','c','d','e','f','0','1','2','3','4','5','6','7','8','9'],
	e:['AES-CBC','AES-GCM','AES-CTR'],
	f:[9,0xE,2,0xF,0xC,5,0x10,7,0xD,0xA,0xB,1,3,0x4,0,8]
},beta=(what)=>{if(what==null||what==''){what=0}if(isNaN(what)){what=what.trim().charCodeAt(0);what=String(what).substr(-1)}if(what>=9){what-=2};what=parseInt(what);
	if(isNaN(what)){what=0}return parseInt(String(what).substr(-1))
},irritator=(obj)=>{let a0=[],d;function II(obj){for(d of Object.getOwnPropertyNames(obj)){a0.push(obj[d])}}II(obj);return a0
},gDec=(enc,m=8)=>{let dec='',i=0,r,q;while(i<enc.length){q=0;while(enc[i]==='1'){q+=1;i+=1}i+=1;r=parseInt(enc.substr(i,Math.log2(m)),2);dec+=String.fromCharCode(q*m+r);i+=Math.log2(m)}return dec
},gEnc=(str,m=8)=>{let enc='',c,code,q,r;for(c of str){code=c.charCodeAt(0);q=Math.floor(code/m);r=code%m;enc+='1'.repeat(q)+'0'+r.toString(2).padStart(Math.log2(m),'0')}return enc
},plain=(what)=>{return what.split("").map(c=>c.charCodeAt(0).toString(16).padStart(2,"0")).join("")
},hex=(what)=>{let res=null;if(what.length){res=what.match(/.{2}/g)?.map(c=>String.fromCharCode(parseInt(c,16))).join('')||''}return res
},randInt=(min,max)=>Math.floor(Math.random()*(max-min)+min)
,_rotate=(num=0xff,arr=0)=>{let a0=Array.isArray(arr)?[...arr]:[...d.a],a1=[0,2,1],a2,d0=0;
	for(d0;d0<num;d0++){a0=[a0[a1[0]],a0[a1[1]],a0[a1[2]]];Number.isInteger(d/4)?a1.unshift(a1.pop()):a1.push(a1.shift())}return a0
},BsTB=(txt,bool=1)=>{let new_str=StB(txt).match(/.{1,8}/g),result='',str,p=bool?[4,5,6,7,0,1,2,3]:[2,4,6,0,1,3,5,7];
	for(str of new_str){result+=str[p[0]]+str[p[1]]+str[p[2]]+str[p[3]]+str[p[4]]+str[p[5]]+str[p[6]]+str[p[7]];p.push(p.shift())};return result
},SnC=(txt,num=4)=>{let result=[],i=0;for(i;i<txt.length;i+=num){result.push(txt.substr(i,num))}return result
},saturnSplit=(arr)=>{return [...arr.filter((_,i)=>i%2===0).rotate(1),...arr.filter((_,i)=>i%2!==0).rotate(1,0)];
},quantumFlip=(arr,ex)=>{
	let spin=parseInt(ex.slice(0,2),16)%8;
	return arr.map((v,i)=>arr[v^(1<<(spin+i%8))%arr.length]^arr[arr.length-1]);
},galacticNoise=(arr)=>{
	let darkMatter=Array.from({length:arr.length },(_, i)=>Math.floor(Math.sin(i**2)*0xFFFF)&0xFF);
	return arr.map((v,i)=>(v+darkMatter[i])%0x100);
},IV=(num=16)=>Array.from(crypto.getRandomValues(new Uint8Array(num))).map(b=>b.toString(16).padStart(2,'0')).join('');
